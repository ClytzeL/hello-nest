// import { Module, DynamicModule } from '@nestjs/common';
// import { createDatabaseProviders } from './database.providers';
// import { Connection } from './connection.provider';

// @Module({
//   providers: [Connection],
// })
// export class DatabaseModule {
//   static forRoot(entities = [], options?): DynamicModule {
//   // 这里就能获取到你的参数，然后在这里进行一个 provicer ，最后把这依据参数生产的provider参数返回给你，在netsj-typeorm 中 到处都是这样的操作 
//     const providers = createDatabaseProviders(options, entities);
//     return {
//       module: DatabaseModule,
//       providers: providers,
//       exports: providers,
//     };
//   }
// }

// // 实际上 它的使用非常的简单只需要

// @Module({
//   imports: [DatabaseModule.forRoot([User])],
// })
// export class AppModule {}

